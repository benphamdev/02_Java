package Main;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.math.BigInteger;

public class DigitalSignature {
    private static final String inputFile = "src//Main//input.txt";
    private static final String outputFile = "src//Main//output.txt";

    public static void main(String[] args) {
        JFrame frame = new JFrame("Digital Signature Verification");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 200);
        frame.setLayout(new FlowLayout());

        JButton verifyButton = new JButton("Verify Signature");
        verifyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                verifySignature();
            }
        });

        frame.add(verifyButton);
        frame.setVisible(true);
    }

    private static void verifySignature() {
        try {
            // Choose input file using JFileChooser
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
            int result = fileChooser.showOpenDialog(null);

            if (result == JFileChooser.APPROVE_OPTION) {
                File signedFile = fileChooser.getSelectedFile();

                // Input p, q, and e using JOptionPane
                BigInteger p = new BigInteger(JOptionPane.showInputDialog("Enter value for p:"));
                BigInteger q = new BigInteger(JOptionPane.showInputDialog("Enter value for q:"));
                BigInteger e = new BigInteger(JOptionPane.showInputDialog("Enter value for e:"));
                BigInteger n = p.multiply(q);

                // Read signed message from file
                FileInputStream inputStream = new FileInputStream(signedFile);
                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

                // Read message, signature, and public key from file
                String messageString = reader.readLine().substring(9);
                String signatureString = reader.readLine().substring(12);
                String publicKeyString = reader.readLine().substring(13);

                // Convert message and signature to BigIntegers
                BigInteger message = new BigInteger(messageString.getBytes());
                BigInteger signature = new BigInteger(signatureString);
                BigInteger publicKey = new BigInteger(publicKeyString.split(", ")[0]);

                // Verify the signature
                BigInteger computedSignature = message.modPow(e, n);
                boolean signatureVerified = computedSignature.equals(signature);

                // Display verification result
                JOptionPane.showMessageDialog(null, "Signature Verified: " + signatureVerified);
            } else {
                System.out.println("No file selected.");
            }
        } catch (IOException ex) {
            System.out.println("An error occurred while reading/writing files.");
            ex.printStackTrace();
        } catch (NumberFormatException ex) {
            System.out.println("Invalid input. Please enter valid integers.");
        }
    }
}
