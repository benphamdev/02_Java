package Main;

import javax.swing.*;
import java.io.*;
import java.math.BigInteger;

public class DigitalSignature {
    private String inputFile;
    private String outputFile;

    // Method to compute signature
    private static BigInteger computeSignature(BigInteger message, BigInteger p, BigInteger q, BigInteger d) {
        BigInteger n = p.multiply(q);
        return message.modPow(d, n);
    }

    // Method to write results to file
    private void writeResultsToFile(BigInteger message, BigInteger signature, BigInteger p, BigInteger q, BigInteger d) throws IOException {
        BigInteger n = p.multiply(q);
        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));
        writer.write("Message: " + message + "\n");
        writer.write("Signature: " + signature + "\n");
        writer.write("Public Key: (" + n + ", " + d.modInverse(p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE))) + ")\n");
        writer.write("Private Key: (" + d + ")\n");
        writer.write("Signed: " + signature + "\n");
        writer.close();
        System.out.println("Signature computation and output completed successfully.");
    }

    // Method to choose file
    private void chooseFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            inputFile = fileChooser.getSelectedFile().getAbsolutePath();
            outputFile = inputFile.replace(".txt", "_output.txt");
        }
    }

    // Method to sign
    private void sign() {
        try {
            BigInteger p = new BigInteger(JOptionPane.showInputDialog("Enter value for p:"));
            BigInteger q = new BigInteger(JOptionPane.showInputDialog("Enter value for q:"));
            BigInteger d = new BigInteger(JOptionPane.showInputDialog("Enter value for d:"));

            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            StringBuilder messageBuilder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                messageBuilder.append(line);
            }
            reader.close();

            BigInteger message = new BigInteger(messageBuilder.toString());

            BigInteger signature = computeSignature(message, p, q, d);

            writeResultsToFile(message, signature, p, q, d);

            JOptionPane.showMessageDialog(null, "Signature: " + signature, "Digital Signature", JOptionPane.INFORMATION_MESSAGE);

            BigInteger publicKeyN = p.multiply(q);
            BigInteger publicKeyE = d.modInverse(p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE)));
            JOptionPane.showMessageDialog(null, "Public Key: (" + publicKeyN + ", " + publicKeyE + ")", "Digital Signature", JOptionPane.INFORMATION_MESSAGE);

            System.out.println("Signature: " + signature);
            System.out.println("Public Key: (" + publicKeyN + ", " + publicKeyE + ")");
        } catch (IOException e) {
            System.out.println("An error occurred while reading/writing files.");
            e.printStackTrace();
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Please enter valid integers.");
        }
    }

    // Main method
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            DigitalSignature app = new DigitalSignature();
            JFrame frame = new JFrame("Digital Signature");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            JPanel panel = new JPanel();

            JButton chooseFileButton = new JButton("Choose File");
            chooseFileButton.addActionListener(e -> app.chooseFile());

            JButton signButton = new JButton("Sign");
            signButton.addActionListener(e -> app.sign());

            panel.add(chooseFileButton);
            panel.add(signButton);
            frame.getContentPane().add(panel);
            frame.pack();
            frame.setVisible(true);
        });
    }
}
